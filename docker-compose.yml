version: "3.9"

services:
  posts-database:
    image: postgres:latest
    container_name: posts-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: linkedin-postdb
    ports:
      - "5432:5432"
    networks:
      - linkedin-network
    volumes:
      - posts-db-data:/var/lib/postgresql/data

  user-database:
    image: postgres:latest
    container_name: user-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: linkedin-userdb
    ports:
      - "5433:5432"
    networks:
      - linkedin-network
    volumes:
      - user-db-data:/var/lib/postgresql/data

  connection-database:
    image: postgres:latest
    container_name: connection-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: linkedin-connectiondb
    ports:
      - "5434:5432"
    networks:
      - linkedin-network
    volumes:
      - connection-db-data:/var/lib/postgresql/data

  notification-database:
    image: postgres:latest
    container_name: notification-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: linkedin-notificationdb
    ports:
      - "5435:5432"
    networks:
      - linkedin-network
    volumes:
      - notification-db-data:/var/lib/postgresql/data

  redis-cache:
    image: redis:latest
    container_name: redis-cache
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - linkedin-network

  kafka-server:
    image: confluentinc/cp-kafka:7.7.1
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093" # For inter-broker communication if you have multiple brokers
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_BROKER_ID: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka-server:9093'
      KAFKA_LISTENERS: 'PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka-server:9092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      CLUSTER_ID: 'EmptNWtoR4GGWx-BH6nGLQ'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
#    volumes:
#      - ./kafka-server/data:/var/lib/kafka/data
    networks:
      - linkedin-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-cluster-ui
    ports:
      - "8000:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-server:9092
    depends_on:
      - kafka-server
    networks:
      - linkedin-network


  discovery-service:
    build:
      context: ./discovery-service
      dockerfile: Dockerfile
    container_name: discovery-service
    ports:
      - "8761:8761"
    networks:
      - linkedin-network

  post-service:
    build:
      context: ./post-service
      dockerfile: Dockerfile
    container_name: post-service
    ports:
      - "9010:9010"
    networks:
      - linkedin-network
    depends_on:
      - redis-cache
      - discovery-service
      - posts-database
      - kafka-server
    working_dir: /app
    volumes:
      - ./post-service:/app
      # Optionally speed up builds by sharing host Maven cache (uncomment and set an absolute Windows path if desired)
      # - ${USERPROFILE}\\.m2\\repository:/root/.m2/repository
    environment:
      SPRING_DEVTOOLS_RESTART_ENABLED: "true"
      # Polling-based restart like chokidar/watchpack (interval and quiet period)
      SPRING_DEVTOOLS_RESTART_POLL_INTERVAL: "2s"
      SPRING_DEVTOOLS_RESTART_QUIET_PERIOD: "1s"
      # Watch extra non-classpath paths (so template/resource edits reload without a Build)
      SPRING_DEVTOOLS_RESTART_ADDITIONAL_PATHS: "src/main/resources"
      # Optional: use a trigger file for manual restarts in slow filesystems (uncomment next line and touch the file to restart)
      # SPRING_DEVTOOLS_RESTART_TRIGGER_FILE: ".reloadtrigger"
    command: ./mvnw -DskipTests=true spring-boot:run

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    ports:
      - "9020:9020"
    networks:
      - linkedin-network
    depends_on:
      - redis-cache
      - user-database
      - discovery-service
      - kafka-server
    working_dir: /app
    volumes:
      - ./user-service:/app
      # Optionally speed up builds by sharing host Maven cache (uncomment and set an absolute Windows path if desired)
      # - ${USERPROFILE}\\.m2\\repository:/root/.m2/repository
    environment:
      SPRING_DEVTOOLS_RESTART_ENABLED: "true"
      SPRING_DEVTOOLS_RESTART_POLL_INTERVAL: "2s"
      SPRING_DEVTOOLS_RESTART_QUIET_PERIOD: "1s"
      SPRING_DEVTOOLS_RESTART_ADDITIONAL_PATHS: "src/main/resources"
      # SPRING_DEVTOOLS_RESTART_TRIGGER_FILE: ".reloadtrigger"
    command: ./mvnw -DskipTests=true spring-boot:run

  connection-service:
    build:
      context: ./connection-service
      dockerfile: Dockerfile
    container_name: connection-service
    ports:
      - "9030:9030"
    networks:
      - linkedin-network
    depends_on:
      - kafka-server
      - discovery-service
      - connection-database
    working_dir: /app
    volumes:
      - ./connection-service:/app
      # Optionally speed up builds by sharing host Maven cache (uncomment and set an absolute Windows path if desired)
      # - ${USERPROFILE}\.m2\\repository:/root/.m2/repository
    environment:
      SPRING_DEVTOOLS_RESTART_ENABLED: "true"
      SPRING_DEVTOOLS_RESTART_POLL_INTERVAL: "2s"
      SPRING_DEVTOOLS_RESTART_QUIET_PERIOD: "1s"
      SPRING_DEVTOOLS_RESTART_ADDITIONAL_PATHS: "src/main/resources"
      # SPRING_DEVTOOLS_RESTART_TRIGGER_FILE: ".reloadtrigger"
    command: ./mvnw -DskipTests=true spring-boot:run


  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    ports:
      - "9040:9040"
    networks:
      - linkedin-network
    depends_on:
      - kafka-server
      - discovery-service
      - notification-database
    working_dir: /app
    volumes:
      - ./notification-service:/app
    environment:
      SPRING_DEVTOOLS_RESTART_ENABLED: "true"
      SPRING_DEVTOOLS_RESTART_POLL_INTERVAL: "2s"
      SPRING_DEVTOOLS_RESTART_QUIET_PERIOD: "1s"
      SPRING_DEVTOOLS_RESTART_ADDITIONAL_PATHS: "src/main/resources"
      # SPRING_DEVTOOLS_RESTART_TRIGGER_FILE: ".reloadtrigger"
    command: ./mvnw -DskipTests=true spring-boot:run

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "8080:8080"
    networks:
      - linkedin-network
    depends_on:
      - kafka-server
      - discovery-service
      - post-service
      - user-service
      - connection-service
      - notification-service

volumes:
  posts-db-data:
  user-db-data:
  connection-db-data:
  redis-data:
  kafka-data:
  notification-db-data:

networks:
  linkedin-network:
    driver: bridge